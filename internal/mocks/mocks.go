// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package internal_test is a generated GoMock package.
package internal_test

import (
	context "context"
	internal "mission-data-challenge/internal"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// RetrieveAllJournals mocks base method.
func (m *MockRepository) RetrieveAllJournals(ctx context.Context) (*[]internal.Journal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveAllJournals", ctx)
	ret0, _ := ret[0].(*[]internal.Journal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveAllJournals indicates an expected call of RetrieveAllJournals.
func (mr *MockRepositoryMockRecorder) RetrieveAllJournals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveAllJournals", reflect.TypeOf((*MockRepository)(nil).RetrieveAllJournals), ctx)
}

// SaveJournal mocks base method.
func (m *MockRepository) SaveJournal(ctx context.Context, journal internal.Journal) (*internal.Journal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveJournal", ctx, journal)
	ret0, _ := ret[0].(*internal.Journal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveJournal indicates an expected call of SaveJournal.
func (mr *MockRepositoryMockRecorder) SaveJournal(ctx, journal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveJournal", reflect.TypeOf((*MockRepository)(nil).SaveJournal), ctx, journal)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddJournal mocks base method.
func (m *MockService) AddJournal(ctx context.Context, journal internal.Journal) (*internal.Journal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddJournal", ctx, journal)
	ret0, _ := ret[0].(*internal.Journal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddJournal indicates an expected call of AddJournal.
func (mr *MockServiceMockRecorder) AddJournal(ctx, journal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddJournal", reflect.TypeOf((*MockService)(nil).AddJournal), ctx, journal)
}

// GetAllJournals mocks base method.
func (m *MockService) GetAllJournals(ctx context.Context) (*[]internal.Journal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJournals", ctx)
	ret0, _ := ret[0].(*[]internal.Journal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJournals indicates an expected call of GetAllJournals.
func (mr *MockServiceMockRecorder) GetAllJournals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJournals", reflect.TypeOf((*MockService)(nil).GetAllJournals), ctx)
}
